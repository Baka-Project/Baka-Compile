#!/bin/bash

  # Email vcyzscape@gmail.com
  # Github github,com/vcyzteen
  # Copyright (c) 2021 vcyzteen <vcyzscape@gmail.com>

# Bail out on any unhandled errors
set -e;

# Check Version
VERSION='0.0.2'

function script_version() {
	echo "$VERSION"
}

function version() {
	echo "script version: $(script_version)"
}

function usage() {
	version
	cat <<EOHELP
Script build kernel.
Usage:  $(basename $0) [options] All contents
  --clang
        set build kernel with toolchain clang
  --gcc
        set build kernel with toolchain gcc
  --version
	    show script builder version
  -h, --help
	    display this help screen
EOHELP
	exit 0
}

# Argument parsing

while [[ "${1:0:1}" = "-" ]]; do
	case $1 in
		-h | --help)
			usage;;
		--clang)
                    function clangpath() {
                            read -e CLANG
                    }
                    function def1() {
                            read -e DEFCONFIG
                    }
                    function host1() {
                            read -e HOST
                    }
                    function user1() {
                            read -e USER
                    }
                    function export1() {
                            export KBUILD_BUILD_USER=$USER
                            export KBUILD_BUILD_HOST=$HOST
                    }
		    function clang() {
                            make -j$(nproc) O=out ARCH=arm64 $DEFCONFIG
                            make -j$(nproc) ARCH=arm64 O=out \
			                    CC=$CLANG/clang \
			                    LD=$CLANG/ld.lld \
			                    AR=$CLANG/llvm-ar \
			                    NM=$CLANG/llvm-nm \
			                    OBJCOPY=$CLANG/llvm-objcopy \
			                    OBJDUMP=$CLANG/llvm-objdump \
			                    STRIP=$CLANG/llvm-strip \
			                    CROSS_COMPILE=$CLANG/aarch64-linux-gnu- \
			                    CROSS_COMPILE_ARM32=$CLANG/arm-linux-gnueabi-
                    }
                    echo "Starting Build Use Clang"
                    clangpath
                    def1
                    host1
                    user1
                    export1
                    clang
		    exit 0;;
		--gcc)
                    function gccpath() {
                            if [[ ARM64 && ARM32 ]]:
                            then
                                 read -e $1
                            fi
                    }
                    function def2() {
                            read -e DEFCONFIG
                    }
                    function host2() {
                            read -e HOST
                    }
                    function user2() {
                            read -e USER
                    }
                    function export2() {
                            export KBUILD_BUILD_USER=$USER
                            export KBUILD_BUILD_HOST=$HOST
                    }
                    function gcc() {
                            make -j$(nproc) O=out ARCH=arm64 $DEFCONFIG
                            make -j$(nproc) ARCH=arm64 O=out \
                                            CROSS_COMPILE=$ARM64/aarch64-linux-gnu- \
                                            CROSS_COMPILE_ARM32=$ARM32/arm-linux-androideabi-
                    }
		    echo "Starting Build Use GCC"
                    gccpath
                    def2
                    host2
                    user2
                    export2
		    gcc
		    exit 0;;
		--version)
			version; exit 0;;
		*)
		    echo "Unknown option: $1. Run 'baka-compile --help' for help."
		exit 1;;
    esac
done

if [[ -z "$2" ]]; then
	echo "Not enough arguments. Run 'baka-compile --help' for help."
	exit 1
fi
